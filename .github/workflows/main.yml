name: Check Last Two Commit Changes

on:
  push:
    branches:
      - main

jobs:
  check-changes:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code and fetch the full commit history
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # List the files changed in the last two commits and save to a file
      - name: List changed files in the last two commits
        run: |
          git diff --name-only HEAD~2 HEAD > changed_files.txt
          cat changed_files.txt

      # Extract and print folder names using awk
      - name: Extract folder names using awk
        run: |
          awk -F'/' 'NR > 1 {print $1}' changed_files.txt | sort -u > folders.txt
          cat folders.txt

      # Set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Build, push Docker images and update Lambda functions
      - name: Build, push Docker images, and update Lambda functions
        run: |
          while read folder; do
          echo "Building and pushing Docker image for folder: $folder"
              cd $folder

              # Fetch the list of existing tags from ECR
              existing_tags=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPO_NAME }} --region ${{ secrets.AWS_REGION }} --output json | jq -r '.imageDetails[].imageTags[]' | grep "^v[0-9]\+\.[0-9]\+\.[0-9]\+-${folder}$" | sort -V | tail -n 1)

              # Determine the next version
              if [ -z "$existing_tags" ]; then
                new_version="v1.0.0-${folder}"
              else
                # Extract the version number and increment it
                major=$(echo $existing_tags | cut -d '.' -f1 | cut -c2-)
                minor=$(echo $existing_tags | cut -d '.' -f2)
                patch=$(echo $existing_tags | cut -d '.' -f3 | cut -d '-' -f1)
                new_patch=$((patch + 1))
                new_version="v${major}.${minor}.${new_patch}-${folder}"
              fi

              echo "New version tag: $new_version"

              # Build Docker image
              docker build -t $folder .

              # Tag the image with ECR repository URL
              docker tag $folder:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:$new_version

              # Log in to ECR
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

              # Push the Docker image to ECR
              docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:$new_version

              # Update the corresponding Lambda function
              echo "Updating Lambda function: $folder"
              aws lambda update-function-code \
                --function-name $folder \
                --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:$new_version \
                --region ${{ secrets.AWS_REGION }}

              cd ..
          done < folders.txt
